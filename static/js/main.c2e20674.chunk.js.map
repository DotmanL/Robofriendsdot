{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","href","textDecoration","color","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2e20674.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {name, email, id} = props;\r\n    return (\r\n        <div className=\" tc bg-white dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            \r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) =>{\r\n   \r\n    return (\r\n        <div> {\r\n        robots.map((user, i) => {\r\n        return ( \r\n        <Card \r\n        key = {i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email} \r\n        /> \r\n        );\r\n    })\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\" >\r\n        <input \r\n        className= \"pa3 ba b--green bg-lightest-blue\" \r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n\r\n   )\r\n   \r\n}\r\nexport default SearchBox;","import React from \"react\"\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style= {{overflowY: 'scroll', border: '1px solid black', height:'800px'}}>\r\n            {props.children}\r\n            </div>\r\n\r\n    );\r\n};\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n       this.setState ({hasError: true})  \r\n    }\r\nrender () {\r\n     if (this.state.hasError) {\r\n        return <h1> Ooops. That is not good </h1>\r\n\r\n    }\r\n    return this.props.children\r\n}\r\n}\r\n\r\n\r\nexport default ErrorBoundary\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n        \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch (requestRobots())\r\n    }\r\n}\r\nclass App extends Component {\r\n   /* constructor() {\r\n        super ()\r\n        this.state = {\r\n            robots: [],\r\n           // searchfield: ''\r\n\r\n        }\r\n    } */\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n   /* onSearchChange= (event) =>{\r\n            this.setState({searchfield: event.target.value})\r\n                } */\r\n\r\n    render() {\r\n        const {searchField, onSearchChange, robots, isPending} =this.props;\r\n        const filteredRobots= robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        return isPending ?\r\n        <h1>Loading</h1>:\r\n        (\r\n            <div className=\"tc\">\r\n                <h1 className='f1'>Robofriends</h1>\r\n                <h2 className='f3 thelas, georgia, serif'><a href= \"https://github.com/DotmanL\"\r\n                style={{ textDecoration: 'underline', color: 'yellow'}}>My Github</a></h2>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                <CardList robots={filteredRobots} />\r\n                </ErrorBoundary>\r\n            </Scroll>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'; \r\n\r\n\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots =() => (dispatch)=>{\r\n    dispatch ({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n        .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n    }","export const CHANGE_SEARCH_FIELD =\"CHANGE_SEARCH_FIELD\";\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'; \r\n\r\n\r\nconst initialStateSearch ={\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n      case CHANGE_SEARCH_FIELD:  \r\n      return Object.assign({}, state, {searchField:action.payload });\r\n    default:\r\n        return state;  \r\n    \r\n    }\r\n}\r\nconst initialStateRobots ={\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n        return Object.assign ({}, state, {robots:action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n                return Object.assign({}, state, {error: action.payload, isPending: false})\r\n                default:\r\n                    return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\n//import {robots} from './robots';\n//import CardList from './CardList';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer =combineReducers ({ searchRobots, requestRobots})\nconst store= \ncreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\nReactDOM.render( \n   <Provider  store={store} >\n   <App/> \n   </Provider> ,document.getElementById('root'));\n    \n \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}